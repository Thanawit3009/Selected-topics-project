import React, { useEffect, useState, useCallback } from 'react';
import axios from 'axios';
import { Link, useNavigate } from 'react-router-dom';
import './Posts.css';
import { refreshAccessToken } from '../utils/auth';
import Navbar from './Navbar';

const Posts = () => {
  const [posts, setPosts] = useState([]);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [loading, setLoading] = useState(true);
  const [currentUserId, setCurrentUserId] = useState(null);
  const navigate = useNavigate();

  const fetchPosts = useCallback(async () => {
    setLoading(true);
    const token = localStorage.getItem('token');

    try {
      if (token) {
        // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        setIsLoggedIn(true);

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const userResponse = await axios.get('http://localhost:8000/api/auth/user/', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setCurrentUserId(userResponse.data.id);

        // ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        const response = await axios.get('http://localhost:8000/api/community/posts/', {
          headers: { Authorization: `Bearer ${token}` },
        });

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ isLiked
        setPosts(
          response.data.map((post) => ({
            ...post,
            isLiked: post.is_liked_by_user || false, // ‡πÄ‡∏û‡∏¥‡πà‡∏° isLiked ‡∏à‡∏≤‡∏Å backend
          }))
        );
      } else {
        // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        const response = await axios.get('http://localhost:8000/api/community/posts/public/');

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏ö‡∏ö public ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ isLiked
        setPosts(
          response.data.map((post) => ({
            ...post,
            isLiked: false, // ‡πÑ‡∏°‡πà‡∏°‡∏µ isLiked ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
          }))
        );
      }
    } catch (error) {
      if (error.response?.status === 401 && token) {
        // ‡∏Å‡∏£‡∏ì‡∏µ Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        try {
          const newToken = await refreshAccessToken();
          localStorage.setItem('token', newToken);
          fetchPosts(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchPosts ‡πÉ‡∏´‡∏°‡πà
        } catch (refreshError) {
          console.error('Error refreshing token:', refreshError.message);
          localStorage.removeItem('token');
          setIsLoggedIn(false);
          navigate('/login'); // ‡∏ô‡∏≥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Login
        }
      } else {
        console.error('Error fetching posts:', error.message);
      }
    } finally {
      setLoading(false); // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏î‡πÜ
    }
  }, [navigate]);

  useEffect(() => {
    fetchPosts();
  }, [fetchPosts]);

  const handleLike = async (postId) => {
    const token = localStorage.getItem('token');

    if (!token) {
      alert('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏Å‡∏î‡∏ñ‡∏π‡∏Å‡πÉ‡∏à‡πÑ‡∏î‡πâ');
      navigate('/login');
      return;
    }

    try {
      const response = await axios.post(
        `http://localhost:8000/api/community/posts/${postId}/like/`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (response.status === 200 || response.status === 201) {
        setPosts((prevPosts) =>
          prevPosts.map((post) =>
            post.id === postId
              ? {
                ...post,
                likes_count: response.data.likes_count, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏•‡∏Ñ‡πå
                isLiked: !post.isLiked, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏•‡∏Ñ‡πå
              }
              : post
          )
        );
      }
    } catch (error) {
      console.error('Error liking post:', error.message);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏ñ‡∏π‡∏Å‡πÉ‡∏à');
    }
  };


  const handleComment = (postId) => {
    navigate(`/posts/${postId}/comments`);
  };

  const handleProfileClick = (userId) => {
    if (isLoggedIn) {
      navigate(userId === currentUserId ? '/profile' : `/member/${userId}`);
    } else {
      navigate('/login');
    }
  };

  return (
    <div className="posts-page">
      <Navbar isLoggedIn={isLoggedIn} onLogout={() => navigate('/login')} />

      <div className="posts-container">
        {loading ? (
          <p className="loading-text">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå...</p>
        ) : posts.length > 0 ? (
          posts.map((post) => (
            <div key={post.id} className="post-card">
              <div className="post-header">
                {post.user_id ? (
                  <div
                    onClick={() => handleProfileClick(post.user_id)}
                    className="post-profile-link"
                  >
                    <img
                      src={post.profile_picture || '/profileicon.png'}
                      alt={post.user_name}
                      className="post-profile-image"
                    />
                    <span className="post-user-name">{post.user_name}</span>
                  </div>
                ) : (
                  <div className="post-user-placeholder">
                    <img
                      src="/profileicon.png"
                      alt="Default Profile"
                      className="post-profile-image"
                    />
                    <span className="post-user-name">Unknown User</span>
                  </div>
                )}
              </div>

              {/* ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ */}
              <h2 className="post-title">{post.title}</h2>

              {/* ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ */}
              <p>{post.content}</p>

              {/* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) */}
              {post.image && <img src={post.image} alt="Post" className="post-image" />}

              <div className="post-actions">
                <button
                  onClick={() => handleLike(post.id)}
                  className={`like-button ${post.isLiked ? 'liked' : ''}`}
                >
                  {post.isLiked ? '‚ù§Ô∏è' : '‚ô°'} {post.likes_count || 0}
                </button>
                <button onClick={() => handleComment(post.id)}>
                  üí¨
                </button>
              </div>
            </div>
          ))
        ) : (
          <p className="no-posts-text">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</p>
        )}
      </div>

      {isLoggedIn && (
        <div className="create-post-btn-container">
          <Link to="/create" className="create-post-btn">
            ‡πÇ‡∏û‡∏™‡∏ï‡πå ‚úçÔ∏è
          </Link>
        </div>
      )}
    </div>
  );
};

export default Posts;
